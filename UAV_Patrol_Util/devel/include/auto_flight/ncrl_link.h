// Generated by gencpp from file auto_flight/ncrl_link.msg
// DO NOT EDIT!


#ifndef AUTO_FLIGHT_MESSAGE_NCRL_LINK_H
#define AUTO_FLIGHT_MESSAGE_NCRL_LINK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace auto_flight
{
template <class ContainerAllocator>
struct ncrl_link_
{
  typedef ncrl_link_<ContainerAllocator> Type;

  ncrl_link_()
    : mode()
    , aux_info()
    , data1(0.0)
    , data2(0.0)
    , data3(0.0)  {
    }
  ncrl_link_(const ContainerAllocator& _alloc)
    : mode(_alloc)
    , aux_info(_alloc)
    , data1(0.0)
    , data2(0.0)
    , data3(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _aux_info_type;
  _aux_info_type aux_info;

   typedef float _data1_type;
  _data1_type data1;

   typedef float _data2_type;
  _data2_type data2;

   typedef float _data3_type;
  _data3_type data3;





  typedef boost::shared_ptr< ::auto_flight::ncrl_link_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auto_flight::ncrl_link_<ContainerAllocator> const> ConstPtr;

}; // struct ncrl_link_

typedef ::auto_flight::ncrl_link_<std::allocator<void> > ncrl_link;

typedef boost::shared_ptr< ::auto_flight::ncrl_link > ncrl_linkPtr;
typedef boost::shared_ptr< ::auto_flight::ncrl_link const> ncrl_linkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auto_flight::ncrl_link_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auto_flight::ncrl_link_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::auto_flight::ncrl_link_<ContainerAllocator1> & lhs, const ::auto_flight::ncrl_link_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.aux_info == rhs.aux_info &&
    lhs.data1 == rhs.data1 &&
    lhs.data2 == rhs.data2 &&
    lhs.data3 == rhs.data3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::auto_flight::ncrl_link_<ContainerAllocator1> & lhs, const ::auto_flight::ncrl_link_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace auto_flight

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::auto_flight::ncrl_link_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auto_flight::ncrl_link_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_flight::ncrl_link_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_flight::ncrl_link_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_flight::ncrl_link_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_flight::ncrl_link_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auto_flight::ncrl_link_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07c672e9218196d466a602767f407d91";
  }

  static const char* value(const ::auto_flight::ncrl_link_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07c672e9218196d4ULL;
  static const uint64_t static_value2 = 0x66a602767f407d91ULL;
};

template<class ContainerAllocator>
struct DataType< ::auto_flight::ncrl_link_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auto_flight/ncrl_link";
  }

  static const char* value(const ::auto_flight::ncrl_link_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auto_flight::ncrl_link_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mode\n"
"string aux_info\n"
"float32 data1\n"
"float32 data2\n"
"float32 data3\n"
;
  }

  static const char* value(const ::auto_flight::ncrl_link_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auto_flight::ncrl_link_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.aux_info);
      stream.next(m.data1);
      stream.next(m.data2);
      stream.next(m.data3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ncrl_link_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auto_flight::ncrl_link_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auto_flight::ncrl_link_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "aux_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.aux_info);
    s << indent << "data1: ";
    Printer<float>::stream(s, indent + "  ", v.data1);
    s << indent << "data2: ";
    Printer<float>::stream(s, indent + "  ", v.data2);
    s << indent << "data3: ";
    Printer<float>::stream(s, indent + "  ", v.data3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTO_FLIGHT_MESSAGE_NCRL_LINK_H
